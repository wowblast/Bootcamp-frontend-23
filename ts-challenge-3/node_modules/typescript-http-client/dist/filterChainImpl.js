"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("./index");
var execute_1 = require("./execute");
var FilterChainImpl = /** @class */ (function () {
    function FilterChainImpl(filters, fromIndex, callBack) {
        if (fromIndex === void 0) { fromIndex = 0; }
        if (callBack === void 0) { callBack = execute_1.default; }
        this.filters = filters;
        this.fromIndex = fromIndex;
        this.callBack = callBack;
    }
    FilterChainImpl.prototype.doFilter = function (request) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var index, filter, installedFilter;
            return __generator(this, function (_b) {
                index = this.fromIndex;
                // Find next filter to apply
                // Looping throught all its filters
                while (index < this.filters.length) {
                    filter = this.filters[index];
                    // If an InstalledFilter has no config, it should be applied to all requests
                    if (!filter.config || filter.config.enabled(request)) {
                        // We have found a filter to apply
                        break;
                    }
                    else {
                        // Go to next filter
                        index++;
                    }
                }
                if (index < this.filters.length) {
                    installedFilter = this.filters[index];
                    // We found a filter to apply
                    (_a = (0, index_1.getLogger)()) === null || _a === void 0 ? void 0 : _a.trace('Applying filter ' + installedFilter.name);
                    // We return the filter of the installedFilter we found and applied to it its own .doFilter method which is not the same method
                    // passing to it the same request and a new FilterChainImpl with the list of filters, a counter incremented by 1, and the callback method
                    return [2 /*return*/, installedFilter.filter.doFilter(request, new FilterChainImpl(this.filters, index + 1, this.callBack))];
                }
                else {
                    // We are at the end of the filter chain,
                    // we can execute the call
                    return [2 /*return*/, this.callBack(request)];
                }
                return [2 /*return*/];
            });
        });
    };
    return FilterChainImpl;
}());
exports.default = FilterChainImpl;
//# sourceMappingURL=filterChainImpl.js.map